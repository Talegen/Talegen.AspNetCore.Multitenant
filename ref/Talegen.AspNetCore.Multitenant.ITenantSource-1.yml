### YamlMime:ManagedReference
items:
- uid: Talegen.AspNetCore.Multitenant.ITenantSource`1
  commentId: T:Talegen.AspNetCore.Multitenant.ITenantSource`1
  id: ITenantSource`1
  parent: Talegen.AspNetCore.Multitenant
  children:
  - Talegen.AspNetCore.Multitenant.ITenantSource`1.FindTenantAsync(System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ITenantSource<TTenant>
  nameWithType: ITenantSource<TTenant>
  fullName: Talegen.AspNetCore.Multitenant.ITenantSource<TTenant>
  type: Interface
  source:
    remote:
      path: src/ITenantSource.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: ITenantSource
    path: ITenantSource.cs
    startLine: 25
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nThis interface defines the minimum implementation of an external tenant source store.\n"
  example: []
  syntax:
    content: >-
      public interface ITenantSource<TTenant>
          where TTenant : class, ITenant, new()
    typeParameters:
    - id: TTenant
      description: The type of the tenant model.
    content.vb: Public Interface ITenantSource(Of TTenant As {Class, ITenant, New})
  nameWithType.vb: ITenantSource(Of TTenant)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Talegen.AspNetCore.Multitenant.ITenantSource(Of TTenant)
  name.vb: ITenantSource(Of TTenant)
- uid: Talegen.AspNetCore.Multitenant.ITenantSource`1.FindTenantAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Talegen.AspNetCore.Multitenant.ITenantSource`1.FindTenantAsync(System.String,System.Threading.CancellationToken)
  id: FindTenantAsync(System.String,System.Threading.CancellationToken)
  parent: Talegen.AspNetCore.Multitenant.ITenantSource`1
  langs:
  - csharp
  - vb
  name: FindTenantAsync(String, CancellationToken)
  nameWithType: ITenantSource<TTenant>.FindTenantAsync(String, CancellationToken)
  fullName: Talegen.AspNetCore.Multitenant.ITenantSource<TTenant>.FindTenantAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/ITenantSource.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: FindTenantAsync
    path: ITenantSource.cs
    startLine: 34
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nThis method implements the tenant search logic for an external tenant source.\n"
  example: []
  syntax:
    content: Task<TTenant> FindTenantAsync(string tenantIdentifier, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: tenantIdentifier
      type: System.String
      description: The tenant identifier to find.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Contains an optional cancellation token.
    return:
      type: System.Threading.Tasks.Task{{TTenant}}
      description: Returns the <xref href="Talegen.AspNetCore.Multitenant.ITenant" data-throw-if-not-resolved="false"></xref> object if found.
    content.vb: Function FindTenantAsync(tenantIdentifier As String, cancellationToken As CancellationToken = Nothing) As Task(Of TTenant)
  overload: Talegen.AspNetCore.Multitenant.ITenantSource`1.FindTenantAsync*
  nameWithType.vb: ITenantSource(Of TTenant).FindTenantAsync(String, CancellationToken)
  fullName.vb: Talegen.AspNetCore.Multitenant.ITenantSource(Of TTenant).FindTenantAsync(System.String, System.Threading.CancellationToken)
references:
- uid: Talegen.AspNetCore.Multitenant
  commentId: N:Talegen.AspNetCore.Multitenant
  name: Talegen.AspNetCore.Multitenant
  nameWithType: Talegen.AspNetCore.Multitenant
  fullName: Talegen.AspNetCore.Multitenant
- uid: Talegen.AspNetCore.Multitenant.ITenant
  commentId: T:Talegen.AspNetCore.Multitenant.ITenant
  parent: Talegen.AspNetCore.Multitenant
  name: ITenant
  nameWithType: ITenant
  fullName: Talegen.AspNetCore.Multitenant.ITenant
- uid: Talegen.AspNetCore.Multitenant.ITenantSource`1.FindTenantAsync*
  commentId: Overload:Talegen.AspNetCore.Multitenant.ITenantSource`1.FindTenantAsync
  name: FindTenantAsync
  nameWithType: ITenantSource<TTenant>.FindTenantAsync
  fullName: Talegen.AspNetCore.Multitenant.ITenantSource<TTenant>.FindTenantAsync
  nameWithType.vb: ITenantSource(Of TTenant).FindTenantAsync
  fullName.vb: Talegen.AspNetCore.Multitenant.ITenantSource(Of TTenant).FindTenantAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TTenant}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TTenant>
  nameWithType: Task<TTenant>
  fullName: System.Threading.Tasks.Task<TTenant>
  nameWithType.vb: Task(Of TTenant)
  fullName.vb: System.Threading.Tasks.Task(Of TTenant)
  name.vb: Task(Of TTenant)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TTenant
    nameWithType: TTenant
    fullName: TTenant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTenant
    nameWithType: TTenant
    fullName: TTenant
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
