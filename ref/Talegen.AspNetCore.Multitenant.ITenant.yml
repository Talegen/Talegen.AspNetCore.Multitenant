### YamlMime:ManagedReference
items:
- uid: Talegen.AspNetCore.Multitenant.ITenant
  commentId: T:Talegen.AspNetCore.Multitenant.ITenant
  id: ITenant
  parent: Talegen.AspNetCore.Multitenant
  children:
  - Talegen.AspNetCore.Multitenant.ITenant.Id
  - Talegen.AspNetCore.Multitenant.ITenant.Identifier
  - Talegen.AspNetCore.Multitenant.ITenant.Properties
  langs:
  - csharp
  - vb
  name: ITenant
  nameWithType: ITenant
  fullName: Talegen.AspNetCore.Multitenant.ITenant
  type: Interface
  source:
    remote:
      path: src/ITenant.cs
      branch: develop
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: ITenant
    path: ITenant.cs
    startLine: 24
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nThis interface represents the minimum implementation of a tenant information model.\n"
  example: []
  syntax:
    content: public interface ITenant
    content.vb: Public Interface ITenant
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Talegen.AspNetCore.Multitenant.ITenant.Id
  commentId: P:Talegen.AspNetCore.Multitenant.ITenant.Id
  id: Id
  parent: Talegen.AspNetCore.Multitenant.ITenant
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ITenant.Id
  fullName: Talegen.AspNetCore.Multitenant.ITenant.Id
  type: Property
  source:
    remote:
      path: src/ITenant.cs
      branch: develop
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: Id
    path: ITenant.cs
    startLine: 30
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nGets or sets the durable tenant identifier that will never change.\n"
  example: []
  syntax:
    content: Guid Id { get; set; }
    parameters: []
    return:
      type: Guid
      description: The identifier.
    content.vb: Property Id As Guid
  overload: Talegen.AspNetCore.Multitenant.ITenant.Id*
  modifiers.csharp:
  - get
  - set
- uid: Talegen.AspNetCore.Multitenant.ITenant.Identifier
  commentId: P:Talegen.AspNetCore.Multitenant.ITenant.Identifier
  id: Identifier
  parent: Talegen.AspNetCore.Multitenant.ITenant
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: ITenant.Identifier
  fullName: Talegen.AspNetCore.Multitenant.ITenant.Identifier
  type: Property
  source:
    remote:
      path: src/ITenant.cs
      branch: develop
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: Identifier
    path: ITenant.cs
    startLine: 36
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nGets or sets the tenant identifier name.\n"
  example: []
  syntax:
    content: string Identifier { get; set; }
    parameters: []
    return:
      type: System.String
      description: The name.
    content.vb: Property Identifier As String
  overload: Talegen.AspNetCore.Multitenant.ITenant.Identifier*
  modifiers.csharp:
  - get
  - set
- uid: Talegen.AspNetCore.Multitenant.ITenant.Properties
  commentId: P:Talegen.AspNetCore.Multitenant.ITenant.Properties
  id: Properties
  parent: Talegen.AspNetCore.Multitenant.ITenant
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: ITenant.Properties
  fullName: Talegen.AspNetCore.Multitenant.ITenant.Properties
  type: Property
  source:
    remote:
      path: src/ITenant.cs
      branch: develop
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: Properties
    path: ITenant.cs
    startLine: 42
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nGets or sets the properties.\n"
  example: []
  syntax:
    content: Dictionary<string, string> Properties { get; set; }
    parameters: []
    return:
      type: Dictionary{System.String,System.String}
      description: The properties.
    content.vb: Property Properties As Dictionary(Of String, String)
  overload: Talegen.AspNetCore.Multitenant.ITenant.Properties*
  modifiers.csharp:
  - get
  - set
references:
- uid: Talegen.AspNetCore.Multitenant
  commentId: N:Talegen.AspNetCore.Multitenant
  name: Talegen.AspNetCore.Multitenant
  nameWithType: Talegen.AspNetCore.Multitenant
  fullName: Talegen.AspNetCore.Multitenant
- uid: Talegen.AspNetCore.Multitenant.ITenant.Id*
  commentId: Overload:Talegen.AspNetCore.Multitenant.ITenant.Id
  name: Id
  nameWithType: ITenant.Id
  fullName: Talegen.AspNetCore.Multitenant.ITenant.Id
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: Talegen.AspNetCore.Multitenant.ITenant.Identifier*
  commentId: Overload:Talegen.AspNetCore.Multitenant.ITenant.Identifier
  name: Identifier
  nameWithType: ITenant.Identifier
  fullName: Talegen.AspNetCore.Multitenant.ITenant.Identifier
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Talegen.AspNetCore.Multitenant.ITenant.Properties*
  commentId: Overload:Talegen.AspNetCore.Multitenant.ITenant.Properties
  name: Properties
  nameWithType: ITenant.Properties
  fullName: Talegen.AspNetCore.Multitenant.ITenant.Properties
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
