### YamlMime:ManagedReference
items:
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1
  commentId: T:Talegen.AspNetCore.Multitenant.TenantBuilder`1
  id: TenantBuilder`1
  parent: Talegen.AspNetCore.Multitenant
  children:
  - Talegen.AspNetCore.Multitenant.TenantBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  - Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithSource``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  - Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  langs:
  - csharp
  - vb
  name: TenantBuilder<TTenant>
  nameWithType: TenantBuilder<TTenant>
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>
  type: Class
  source:
    remote:
      path: src/TenantBuilder.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: TenantBuilder
    path: TenantBuilder.cs
    startLine: 24
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nThis class implements the tenant builder logic for tenant and store strategy.\n"
  example: []
  syntax:
    content: >-
      public class TenantBuilder<TTenant>
          where TTenant : class, ITenant, new()
    typeParameters:
    - id: TTenant
      description: The type of the tenant.
    content.vb: Public Class TenantBuilder(Of TTenant As {Class, ITenant, New})
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: TenantBuilder(Of TTenant)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant)
  name.vb: TenantBuilder(Of TTenant)
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Talegen.AspNetCore.Multitenant.TenantBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: '#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)'
  parent: Talegen.AspNetCore.Multitenant.TenantBuilder`1
  langs:
  - csharp
  - vb
  name: TenantBuilder(IServiceCollection)
  nameWithType: TenantBuilder<TTenant>.TenantBuilder(IServiceCollection)
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.TenantBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Constructor
  source:
    remote:
      path: src/TenantBuilder.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: .ctor
    path: TenantBuilder.cs
    startLine: 35
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nInitializes a new instance of the <xref href=\"Talegen.AspNetCore.Multitenant.TenantBuilder%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TenantBuilder(IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    content.vb: Public Sub New(services As IServiceCollection)
  overload: Talegen.AspNetCore.Multitenant.TenantBuilder`1.#ctor*
  nameWithType.vb: TenantBuilder(Of TTenant).TenantBuilder(IServiceCollection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).TenantBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  parent: Talegen.AspNetCore.Multitenant.TenantBuilder`1
  langs:
  - csharp
  - vb
  name: WithResolutionStrategy<TStrategy>(ServiceLifetime)
  nameWithType: TenantBuilder<TTenant>.WithResolutionStrategy<TStrategy>(ServiceLifetime)
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.WithResolutionStrategy<TStrategy>(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/TenantBuilder.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: WithResolutionStrategy
    path: TenantBuilder.cs
    startLine: 46
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nImplements the specific tenant resolution strategy.\n"
  example: []
  syntax:
    content: >-
      public TenantBuilder<TTenant> WithResolutionStrategy<TStrategy>(ServiceLifetime lifetime = ServiceLifetime.Transient)
          where TStrategy : class, ITenantResolverStrategy
    parameters:
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      description: The lifetime.
    typeParameters:
    - id: TStrategy
      description: The type of the strategy.
    return:
      type: Talegen.AspNetCore.Multitenant.TenantBuilder`1
      description: Returns the tenant builder.
    content.vb: Public Function WithResolutionStrategy(Of TStrategy As {Class, ITenantResolverStrategy})(lifetime As ServiceLifetime = ServiceLifetime.Transient) As TenantBuilder(Of TTenant)
  overload: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithResolutionStrategy*
  nameWithType.vb: TenantBuilder(Of TTenant).WithResolutionStrategy(Of TStrategy)(ServiceLifetime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).WithResolutionStrategy(Of TStrategy)(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: WithResolutionStrategy(Of TStrategy)(ServiceLifetime)
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  parent: Talegen.AspNetCore.Multitenant.TenantBuilder`1
  langs:
  - csharp
  - vb
  name: WithStore<TStore>(ServiceLifetime)
  nameWithType: TenantBuilder<TTenant>.WithStore<TStore>(ServiceLifetime)
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.WithStore<TStore>(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/TenantBuilder.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: WithStore
    path: TenantBuilder.cs
    startLine: 58
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nImplements the specific tenant store store method.\n"
  example: []
  syntax:
    content: >-
      public TenantBuilder<TTenant> WithStore<TStore>(ServiceLifetime lifetime = ServiceLifetime.Transient)
          where TStore : class, ITenantStore<TTenant>
    parameters:
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      description: The lifetime.
    typeParameters:
    - id: TStore
      description: The type of the store.
    return:
      type: Talegen.AspNetCore.Multitenant.TenantBuilder`1
      description: Returns the tenant builder.
    content.vb: Public Function WithStore(Of TStore As {Class, ITenantStore(Of TTenant)})(lifetime As ServiceLifetime = ServiceLifetime.Transient) As TenantBuilder(Of TTenant)
  overload: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithStore*
  nameWithType.vb: TenantBuilder(Of TTenant).WithStore(Of TStore)(ServiceLifetime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).WithStore(Of TStore)(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: WithStore(Of TStore)(ServiceLifetime)
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithSource``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithSource``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: WithSource``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  parent: Talegen.AspNetCore.Multitenant.TenantBuilder`1
  langs:
  - csharp
  - vb
  name: WithSource<TSource>(ServiceLifetime)
  nameWithType: TenantBuilder<TTenant>.WithSource<TSource>(ServiceLifetime)
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.WithSource<TSource>(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/TenantBuilder.cs
      branch: main
      repo: https://github.com/Talegen/Talegen.AspNetCore.Multitenant
    id: WithSource
    path: TenantBuilder.cs
    startLine: 70
  assemblies:
  - Talegen.AspNetCore.Multitenant
  namespace: Talegen.AspNetCore.Multitenant
  summary: "\nImplements the specific tenant source for retrieval of non-cached tenant requests.\n"
  example: []
  syntax:
    content: >-
      public TenantBuilder<TTenant> WithSource<TSource>(ServiceLifetime lifetime = ServiceLifetime.Transient)
          where TSource : class, ITenantSource<TTenant>
    parameters:
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      description: The lifetime.
    typeParameters:
    - id: TSource
      description: The type of the source.
    return:
      type: Talegen.AspNetCore.Multitenant.TenantBuilder`1
      description: Returns the tenant builder.
    content.vb: Public Function WithSource(Of TSource As {Class, ITenantSource(Of TTenant)})(lifetime As ServiceLifetime = ServiceLifetime.Transient) As TenantBuilder(Of TTenant)
  overload: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithSource*
  nameWithType.vb: TenantBuilder(Of TTenant).WithSource(Of TSource)(ServiceLifetime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).WithSource(Of TSource)(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: WithSource(Of TSource)(ServiceLifetime)
references:
- uid: Talegen.AspNetCore.Multitenant
  commentId: N:Talegen.AspNetCore.Multitenant
  name: Talegen.AspNetCore.Multitenant
  nameWithType: Talegen.AspNetCore.Multitenant
  fullName: Talegen.AspNetCore.Multitenant
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1
  commentId: T:Talegen.AspNetCore.Multitenant.TenantBuilder`1
  parent: Talegen.AspNetCore.Multitenant
  name: TenantBuilder<TTenant>
  nameWithType: TenantBuilder<TTenant>
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>
  nameWithType.vb: TenantBuilder(Of TTenant)
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant)
  name.vb: TenantBuilder(Of TTenant)
  spec.csharp:
  - uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1
    name: TenantBuilder
    nameWithType: TenantBuilder
    fullName: Talegen.AspNetCore.Multitenant.TenantBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TTenant
    nameWithType: TTenant
    fullName: TTenant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1
    name: TenantBuilder
    nameWithType: TenantBuilder
    fullName: Talegen.AspNetCore.Multitenant.TenantBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTenant
    nameWithType: TTenant
    fullName: TTenant
  - name: )
    nameWithType: )
    fullName: )
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.#ctor*
  commentId: Overload:Talegen.AspNetCore.Multitenant.TenantBuilder`1.#ctor
  name: TenantBuilder
  nameWithType: TenantBuilder<TTenant>.TenantBuilder
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.TenantBuilder
  nameWithType.vb: TenantBuilder(Of TTenant).TenantBuilder
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).TenantBuilder
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithResolutionStrategy*
  commentId: Overload:Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithResolutionStrategy
  name: WithResolutionStrategy
  nameWithType: TenantBuilder<TTenant>.WithResolutionStrategy
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.WithResolutionStrategy
  nameWithType.vb: TenantBuilder(Of TTenant).WithResolutionStrategy
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).WithResolutionStrategy
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceLifetime
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithStore*
  commentId: Overload:Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithStore
  name: WithStore
  nameWithType: TenantBuilder<TTenant>.WithStore
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.WithStore
  nameWithType.vb: TenantBuilder(Of TTenant).WithStore
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).WithStore
- uid: Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithSource*
  commentId: Overload:Talegen.AspNetCore.Multitenant.TenantBuilder`1.WithSource
  name: WithSource
  nameWithType: TenantBuilder<TTenant>.WithSource
  fullName: Talegen.AspNetCore.Multitenant.TenantBuilder<TTenant>.WithSource
  nameWithType.vb: TenantBuilder(Of TTenant).WithSource
  fullName.vb: Talegen.AspNetCore.Multitenant.TenantBuilder(Of TTenant).WithSource
